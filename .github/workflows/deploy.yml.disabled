name: VOD Pipeline Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手動実行を許可

env:
  AWS_REGION: ap-northeast-1
  PROJECT_NAME: vod-sample
  NODE_VERSION: 18

jobs:
  # Lambda関数のビルドとテスト
  build-lambda:
    name: Build Lambda Functions
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'services/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./services
      run: |
        npm ci
        npm install --workspace=submit-job
        npm install --workspace=notify
    
    - name: Lint TypeScript code
      working-directory: ./services
      run: |
        npm run lint:all
      continue-on-error: true
    
    - name: Build Lambda functions
      working-directory: ./services
      run: |
        npm run build:all
    
    - name: Run tests
      working-directory: ./services
      run: |
        npm run test:all
      continue-on-error: true
    
    - name: Package Lambda functions
      working-directory: ./services
      run: |
        chmod +x build.sh
        ./build.sh
    
    - name: Upload Lambda artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lambda-functions
        path: |
          services/submit-job/*.zip
          services/notify/*.zip
          terraform/dist/
        retention-days: 7

  # Terraformの検証
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    needs: build-lambda
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Lambda artifacts
      uses: actions/download-artifact@v4
      with:
        name: lambda-functions
        path: ./
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check -recursive
      continue-on-error: true
    
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init -backend=false
    
    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate
    
    - name: Terraform Plan (Dry Run)
      working-directory: ./terraform
      run: |
        terraform plan \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="region=${{ env.AWS_REGION }}" \
          -var="environment=dev" \
          -var="input_bucket_name=${{ env.PROJECT_NAME }}-dev-input" \
          -var="output_bucket_name=${{ env.PROJECT_NAME }}-dev-output" \
          -out=tfplan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
      if: github.event_name == 'pull_request'

  # 開発環境へのデプロイ
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-lambda, terraform-validate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: development
      url: ${{ steps.deploy.outputs.cloudfront_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Lambda artifacts
      uses: actions/download-artifact@v4
      with:
        name: lambda-functions
        path: ./
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
          -backend-config="key=${{ env.PROJECT_NAME }}/dev/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"
    
    - name: Terraform Plan
      id: plan
      working-directory: ./terraform
      run: |
        terraform plan \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="region=${{ env.AWS_REGION }}" \
          -var="environment=dev" \
          -var="input_bucket_name=${{ env.PROJECT_NAME }}-dev-input" \
          -var="output_bucket_name=${{ env.PROJECT_NAME }}-dev-output" \
          -out=tfplan
    
    - name: Terraform Apply
      id: deploy
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve tfplan
        
        # 出力値を取得してGitHub Actionsの出力として設定
        echo "cloudfront_url=https://$(terraform output -raw cloudfront_domain_name)" >> $GITHUB_OUTPUT
        echo "input_bucket=$(terraform output -raw input_bucket_name)" >> $GITHUB_OUTPUT
        echo "output_bucket=$(terraform output -raw output_bucket_name)" >> $GITHUB_OUTPUT
        echo "submit_job_function=$(terraform output -raw submit_job_function_name)" >> $GITHUB_OUTPUT
        echo "notify_function=$(terraform output -raw notify_function_name)" >> $GITHUB_OUTPUT
    
    - name: Setup S3 Event Notification
      run: |
        # S3バケットにLambda関数のトリガーを設定
        aws s3api put-bucket-notification-configuration \
          --bucket ${{ steps.deploy.outputs.input_bucket }} \
          --notification-configuration '{
            "LambdaConfigurations": [
              {
                "Id": "SubmitJobTrigger",
                "LambdaFunctionArn": "arn:aws:lambda:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:${{ steps.deploy.outputs.submit_job_function }}",
                "Events": ["s3:ObjectCreated:*"],
                "Filter": {
                  "Key": {
                    "FilterRules": [
                      {
                        "Name": "suffix",
                        "Value": ".mp4"
                      }
                    ]
                  }
                }
              }
            ]
          }'
    
    - name: Deployment Summary
      run: |
        echo "## 🚀 デプロイ完了サマリー" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 リソース情報" >> $GITHUB_STEP_SUMMARY
        echo "- **CloudFront URL:** [${{ steps.deploy.outputs.cloudfront_url }}](${{ steps.deploy.outputs.cloudfront_url }})" >> $GITHUB_STEP_SUMMARY
        echo "- **入力バケット:** ${{ steps.deploy.outputs.input_bucket }}" >> $GITHUB_STEP_SUMMARY
        echo "- **出力バケット:** ${{ steps.deploy.outputs.output_bucket }}" >> $GITHUB_STEP_SUMMARY
        echo "- **SubmitJob関数:** ${{ steps.deploy.outputs.submit_job_function }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Notify関数:** ${{ steps.deploy.outputs.notify_function }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 次のステップ" >> $GITHUB_STEP_SUMMARY
        echo "1. テスト用MP4ファイルを \`${{ steps.deploy.outputs.input_bucket }}\` にアップロード" >> $GITHUB_STEP_SUMMARY
        echo "2. MediaConvert処理の進行をCloudWatchで監視" >> $GITHUB_STEP_SUMMARY
        echo "3. 処理完了後、CloudFrontで動画配信を確認" >> $GITHUB_STEP_SUMMARY

  # 本番環境へのデプロイ（タグベース）
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-lambda, terraform-validate]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: ${{ steps.deploy.outputs.cloudfront_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Lambda artifacts
      uses: actions/download-artifact@v4
      with:
        name: lambda-functions
        path: ./
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Init (Production)
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET_PROD }}" \
          -backend-config="key=${{ env.PROJECT_NAME }}/prod/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"
    
    - name: Terraform Plan (Production)
      working-directory: ./terraform
      run: |
        terraform plan \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="region=${{ env.AWS_REGION }}" \
          -var="environment=prod" \
          -var="input_bucket_name=${{ env.PROJECT_NAME }}-prod-input" \
          -var="output_bucket_name=${{ env.PROJECT_NAME }}-prod-output" \
          -out=tfplan
    
    - name: Terraform Apply (Production)
      id: deploy
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve tfplan
        
        echo "cloudfront_url=https://$(terraform output -raw cloudfront_domain_name)" >> $GITHUB_OUTPUT
        echo "input_bucket=$(terraform output -raw input_bucket_name)" >> $GITHUB_OUTPUT 